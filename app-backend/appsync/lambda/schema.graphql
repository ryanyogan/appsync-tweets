type Mutation {
  # Create a Tweet for a user
  # consumer keys and tokens are required for lambda integration
  createTweet(
    tweet: String!
    consumer_key: String!
    consumer_secret: String!
    access_token_key: String!
    access_token_secret: String!
    created_at: String
  ): Tweet!

  # Delete User Tweet
  deleteTweet(
    tweet_id: String!
    consumer_key: String!
    consumer_secret: String!
    access_token_key: String!
    access_token_secret: String!
  ): Tweet!

  # Retweet existing Tweet
  reTweet(
    tweet_id: String!
    consumer_key: String!
    consumer_secret: String!
    access_token_key: String!
    access_token_secret: String!
  ): Tweet!
}

type Query {
  meInfo(consumer_key: String!, consumer_secret: String!): User!
  getUserInfo(
    handle: String!
    consumer_key: String!
    consumer_secret: String!
  ): User!
}

type Subscription {
  addTweet: Tweet @aws_subscribe(mutations: ["createTweet"])
}

type Tweet {
  tweet_id: String!
  tweet: String!
  retweeted: Boolean
  retweet_count: Int
  favorited: Boolean
  created_at: String
}

type TweetConnection {
  items: [Tweet!]!
  nextToken: String
}

type User {
  name: String!
  handle: String!
  location: String!
  description: String!
  followers_count: Int!
  friends_count: Int!
  favourites_count: Int!
  following: [String!]!
  topTweet: Tweet
  tweets(limit: Int, nextToken: String): TweetConnection
}

schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}
